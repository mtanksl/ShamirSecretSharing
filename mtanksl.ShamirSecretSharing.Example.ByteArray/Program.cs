using System;
using System.Linq;
using System.Numerics;

namespace mtanksl.ShamirSecretSharing.Example.ByteArray
{
    internal class Program
    {
        static void Main(string[] args)
        {
            // How to split a byte array into shares

            using (var sss = new ShamirSecretSharing() )
            {
                var message = new byte[512];

                for (int i = 0; i < message.Length; i++)
                {
                    message[i] = (byte)(i % 255);
                }

                var value = new BigInteger(message.Concat(new byte[] { 0x00 } ).ToArray() );

                var modulo = BigInteger.Pow(2, 4253) - 1; // Modulo must be a prime number greater than value

                var shares = sss.Split(2, 3, value, modulo);

                foreach (var share in shares)
                {
                    Console.WriteLine(share);
                }
            }

            // How to join shares into a byte array

            using (var sss = new ShamirSecretSharing() )
            {
                var shares = new[] 
                {
                    Share.Parse("01-34E29B7529B4252532077A9C0DDEC40D84436212BD387CC93E9F3C47F4DCC0835FBA2A6572B628D85994D51F9C5BBD77ECCDD9117BAF8B09471D46D8B3D8699AEAA72D2285A7EFDCF339B99AE1B293F701B6905CFBBB79F8F6787C8139643DA62528E49ECAEDFA6ACA2123D61515AB4487FF8E840694B56D7C05E4ED137399C604F4A75B254B9A0F2FC95E66A5DE26A976C3889953BB31D0514AA2E68B3A0B80708AB91A2D95C89FC5469645314CE69F025FAC70841DCB186E1D99C90FBC3203FD3548B74EAD8E7195BB19686AD0650427EA98549ADD0E5C1A599D94BB948603A08668EF13C16C5F95025568E855D6AB73A3A2C8CD754FAC3B424858A5D43EF41499CD95873583F365CB06A6CC3EC16CD1A30AC9C065CE5CA69082B7C4D867796CBAEF23568F962152B92D9D2E8EBEBC5CC559E960D3A0D8497BF61B5E2753E2DEF502CCE55319061AAB3942217A68EA20F48F96BDFA6D909CC1B6569F4BD1A7582F729103A515D3C4261E7F5B9C3D48BDEACEDC1FDED12C185EBC53EFDCD07E5F61C8B311A74BF34BD5D855E22EFB55B38F0C1F37E640C632E18D483FF4234C37496B68049654F9819758DC935727772E88B172B4AC9F479277909D26773FE494BC852E82A36996DC2A66C289D5D37B4AF2A775B08930B184ED90BBE6642BA596CDD5F4AB1E2A8C9F53FB7C03670D8A7D3DE063892C08C4C439ADAFDF1C23E3064FAB3B104719DF974C780899E5E7C0C65E3E1F"),
                   
                    Share.Parse("02-69C335E84E6345435C05EA2D0FAF7B0CF875B211665CE27B65255F73CC9C63E89E5333A7C0472B898BFF80140C8A4CC0A86A81F0C129E1DB550152752B7495F5940E1901C60999729F2A28EA7618D99FB31ACF65A2229D9995989EA7166B1CEDEAEE65DA30768F6E2CDADB40BFBCE7199E8DAB9598B2F46380914D60AB68B40D8966CD33C610AE97D5083341BE2FBFC25CF57E9F12E1CC080BFBA9317BD777604073D091B584EA97E2E381DFB5EA1D90540CA62D5485DF79238177D762BAA64639AACDAAD894561B62AD680408D3FC387D025FD55FE546E05BD85F4D9A4B2E275F2BEEFA429CF2D6411BBFE4E3BDBD67F654529DA6F5A7607E8A95B44DAB7EE7283098270A65FFDEC28C02408C6F73C99135027E6CB585A13307EA526C93B0D2B752BC2387F8051B7B48300E30EE4D498858809E8C700A795ABCB1FB7E1067847CA9C2538661EBC3EA0B2838F5A58184F095CCD8259F84C8DF281251E13843EF4FFC80BEA1E3C33D20E3D09149CA0B2009632A45CA452CE1B641FD2A613B227D3D400DE39DC70F5E0E20261F37CF661BD58C85A9D835EAF3CB2780F4E049A8F7CCEF322C6385014A5A84050C7A009F3DAB5DAF30B3A287D66A34657E8F2FBF0768B647983E800B64EF8A00B845DCD726C3117C168B3C89892F00469AEFEA76694BB8C70472566C2F55BC0A0D19DF2A230988CCD21C62188F8F785E62C13A45C50D9E5677208E32BE2F99F01032CBCF818DBD7C1E")
                };

                var modulo = BigInteger.Pow(2, 4253) - 1;

                var value = sss.Join(shares, modulo);

                var message = value.ToByteArray();

                for (int i = 0; i < message.Length; i++)
                {
                    Console.Write(message[i].ToString("X2") + " ");
                }
            }
        }
    }
}